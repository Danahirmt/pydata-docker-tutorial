** Running a container

To check that everything is set-up, run the following:

#+BEGIN_EXAMPLE
 docker run hello-world
#+END_EXAMPLE

```sh

Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
d1725b59e92d: Pull complete
Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/
```


** Pulling an Image

Now that everything is set up, let's walk through how to run your first container. We will run a =python= container, and get familiar with some of the =docker= commands.

In your terminal, run the following:

#+BEGIN_EXAMPLE
 docker pull python
#+END_EXAMPLE

If you get a permission denied error, it may require you to run =sudo docker pull=. To avoid this in the future, try:

#+BEGIN_EXAMPLE
 sudo usermod -aG docker $USER
#+END_EXAMPLE

Then exit and restart your terminal.

The pull command fetches the latest =python= image from *Dockerhub*, a public container registry. To see which images are downloaded to your machine, run the following:

#+BEGIN_EXAMPLE
 docker images
#+END_EXAMPLE

Now that we have pulled our first image, it is time to run the container.

** Running a Container
In your terminal, run the following:
#+BEGIN_EXAMPLE
 docker run python echo "hello!"
#+END_EXAMPLE

What happens now? When you call =run=, the Docker client calls the Docker daemon, which checks locally to see if the image is available, if it is not, it downloads it from Dockerhub. Since we already pulled the image, this step is not necessary. Instead, the daemon creates the container and runs the command you specified in the containter. The output of the command is then streamed to the client.

In our above example, the Docker client ran the command in the container and then exited out...in a matter of seconds! The speed with which containers can be created, and commands run makes them very useful in a multitude of use cases. Imagine, using Azure or AWS to boot up a virtual machine, running a command and then exiting.

Note that the container exits after the command you pass to it is run. For it to not exit, you will need to run:
#+BEGIN_EXAMPLE
 docker run -it python python
#+END_EXAMPLE

This drops you in to the container, and into a python shell. Try out a few commands. You can exit the container by typing =exit=.

If you want to see what containers you have running, type:
#+BEGIN_EXAMPLE
 docker ps
#+END_EXAMPLE

Since you have exited out of all the containers, you will see nothing here. You see the containers that you _have_ run, try:

#+BEGIN_EXAMPLE
 docker ps -a
#+END_EXAMPLE

This shows you a list of all the containers, you have run and also their STATUS. If at any time, you want to clean up images and containers, you have to use:
#+BEGIN_EXAMPLE
 docker rm $(docker ps -a -q)
 
This clears all the containers on your machine. Similarly, to remove all images, use =docker rmi $(docker images -a -q)=.
